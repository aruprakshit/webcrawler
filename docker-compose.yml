services:
  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: webcrawler-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - webcrawler-network

  # Kafka message broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: webcrawler-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 3
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - webcrawler-network

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: webcrawler-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - webcrawler-network

  # MinIO object storage (S3-compatible)
  minio:
    image: minio/minio:latest
    container_name: webcrawler-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    networks:
      - webcrawler-network

  # Cassandra database
  cassandra:
    image: cassandra:4.1
    container_name: webcrawler-cassandra
    ports:
      - "9042:9042"
    environment:
      CASSANDRA_CLUSTER_NAME: webcrawler-cluster
      CASSANDRA_DC: datacenter1
      CASSANDRA_RACK: rack1
    volumes:
      - cassandra-data:/var/lib/cassandra
    networks:
      - webcrawler-network

  # Python Producer Service
  python-producer:
    build:
      context: ./python-producer
      dockerfile: Dockerfile
    container_name: webcrawler-python-producer
    user: "1001:1001"
    depends_on:
      - kafka
      - redis
      - cassandra
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      REDIS_HOST: redis
      REDIS_PORT: 6379
      CASSANDRA_HOST: cassandra
      CASSANDRA_PORT: 9042
    volumes:
      - ./python-producer:/app
    networks:
      - webcrawler-network

  # Node.js Consumer Service
  nodejs-consumer:
    build:
      context: ./nodejs-consumer
      dockerfile: Dockerfile
    container_name: webcrawler-nodejs-consumer
    depends_on:
      - kafka
      - redis
      - cassandra
      - minio
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      REDIS_HOST: redis
      REDIS_PORT: 6379
      CASSANDRA_HOST: cassandra
      CASSANDRA_PORT: 9042
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
    volumes:
      - ./nodejs-consumer:/app
      - /app/node_modules
    networks:
      - webcrawler-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: webcrawler-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - webcrawler-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: webcrawler-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - webcrawler-network

  # Kafka UI for Kafka dashboard
  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.2
    container_name: webcrawler-kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: webcrawler-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_PROPERTIES_SECURITY_PROTOCOL: PLAINTEXT
    depends_on:
      - kafka
    networks:
      - webcrawler-network

volumes:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  redis-data:
  minio-data:
  cassandra-data:
  prometheus-data:
  grafana-data:


networks:
  webcrawler-network:
    driver: bridge
